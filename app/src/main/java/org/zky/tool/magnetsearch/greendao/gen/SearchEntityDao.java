package org.zky.tool.magnetsearch.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.zky.tool.magnetsearch.search.SearchEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_ENTITY".
*/
public class SearchEntityDao extends AbstractDao<SearchEntity, Long> {

    public static final String TABLENAME = "SEARCH_ENTITY";

    /**
     * Properties of entity SearchEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Opened = new Property(1, boolean.class, "opened", false, "OPENED");
        public final static Property IsFavorite = new Property(2, boolean.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property Href = new Property(3, String.class, "href", false, "HREF");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Size = new Property(5, String.class, "size", false, "SIZE");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
    };


    public SearchEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SearchEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OPENED\" INTEGER NOT NULL ," + // 1: opened
                "\"IS_FAVORITE\" INTEGER NOT NULL ," + // 2: isFavorite
                "\"HREF\" TEXT," + // 3: href
                "\"TITLE\" TEXT UNIQUE ," + // 4: title
                "\"SIZE\" TEXT," + // 5: size
                "\"DATE\" TEXT);"); // 6: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOpened() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsFavorite() ? 1L: 0L);
 
        String href = entity.getHref();
        if (href != null) {
            stmt.bindString(4, href);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(6, size);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOpened() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsFavorite() ? 1L: 0L);
 
        String href = entity.getHref();
        if (href != null) {
            stmt.bindString(4, href);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(6, size);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchEntity readEntity(Cursor cursor, int offset) {
        SearchEntity entity = new SearchEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // opened
            cursor.getShort(offset + 2) != 0, // isFavorite
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // href
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // size
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpened(cursor.getShort(offset + 1) != 0);
        entity.setIsFavorite(cursor.getShort(offset + 2) != 0);
        entity.setHref(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
